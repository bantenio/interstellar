import java.nio.file.Files
import java.nio.file.Paths

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

repositories {
    mavenCentral()
    maven {
        url = uri('https://maven.aliyun.com/repository/public')
    }
}

ext {
    project_name = "${project.name.replace('interstellar-', '')}"
}

group = "io.github.bantenio.${project_root_name}"
version = "${version}"
description = "$project_description"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

javadoc {
    options {
        encoding('UTF-8')
        version
        author
    }
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    archiveBaseName = "${project_root_name}-${project_name}"
}

def localProperties = new Properties()
if (Files.exists(Paths.get("$project.rootDir/maven_cert.properties"))) {
    localProperties.load(new FileInputStream("$rootProject.rootDir/maven_cert.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
} else {
    localProperties.setProperty("center_maven_repository_username", "nothing")
    localProperties.setProperty("center_maven_repository_password", "nothing")
    localProperties.setProperty("signing.keyId", "nothing")
    localProperties.setProperty("signing.password", "nothing")
    localProperties.setProperty("igning.secretKeyRingFile", "nothing")
}

ext {
    center_maven_repository_username = localProperties.getProperty("center_maven_repository_username")
    center_maven_repository_password = localProperties.getProperty("center_maven_repository_password")
    signingKeyId = localProperties.getProperty("signing.keyId")
    signingPassword = localProperties.getProperty("signing.password")
    signingGpgKeyFile = localProperties.getProperty("signing.secretKeyRingFile")
    signingGpgKeyFile = "$rootProject.rootDir/$signingGpgKeyFile"
    signingGpgKey = ''
    if (Files.exists(Paths.get(signingGpgKeyFile))) {
        signingGpgKey = new File(signingGpgKeyFile).text
    }
}

publishing {
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? "$centerMavenSnapshotsUrl" : "$centerMavenReleasesUrl"
            credentials {
                username "${center_maven_repository_username}"
                password "${center_maven_repository_password}"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${project_root_name}-${project_name}"
            from components.java
            groupId = "${project_group}"
            pom {
                name = "${project_root_name}-${project_name}"
                description = "$project.description"
                url = "${project_url}"
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://www.opensource.org/licenses/mit-license.php'
                    }
                }
                developers {
                    developer {
                        id = 'bantenio'
                        name = 'Sun Kaihan'
                        email = 'bantenio@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:bantenio/interstellar.git'
                    developerConnection = 'scm:git:git@github.com:bantenio/interstellar.git'
                    url = "${project_url}"
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(signingKeyId, signingGpgKey, signingPassword)
    sign publishing.publications.mavenJava
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
